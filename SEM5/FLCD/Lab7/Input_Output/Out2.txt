ACCEPTED
Production strings: [program -> [start, compound_statement], compound_statement -> [{, statement_list, }], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [write_statement], write_statement -> [write, (, IDENTIFIER, )], statement_list -> [statement_list, statement], statement -> [structure_statement], structure_statement -> [while_statement], while_statement -> [while, (, condition, ), compound_statement], compound_statement -> [{, statement_list, }], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [assignment_statement], assignment_statement -> [IDENTIFIER, =, ar_expression], ar_expression -> [term], term -> [IDENTIFIER], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [assignment_statement], assignment_statement -> [IDENTIFIER, =, ar_expression], ar_expression -> [term], term -> [IDENTIFIER], statement_list -> [statement], statement -> [simple_statement, ;], simple_statement -> [assignment_statement], assignment_statement -> [IDENTIFIER, =, ar_expression], ar_expression -> [mod_expression], mod_expression -> [mod, (, ar_expression, ,, ar_expression, )], ar_expression -> [term], term -> [IDENTIFIER], ar_expression -> [term], term -> [IDENTIFIER], condition -> [ar_expression, relation, ar_expression], ar_expression -> [term], term -> [CONST], relation -> [!=], ar_expression -> [term], term -> [IDENTIFIER], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [read_statement], read_statement -> [read, (, IDENTIFIER, )], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [read_statement], read_statement -> [read, (, IDENTIFIER, )], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [declaration], declaration -> [primitive_declaration], primitive_declaration -> [simple_type, IDENTIFIER], simple_type -> [int], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [declaration], declaration -> [primitive_declaration], primitive_declaration -> [simple_type, IDENTIFIER], simple_type -> [int], statement_list -> [statement], statement -> [simple_statement, ;], simple_statement -> [declaration], declaration -> [primitive_declaration], primitive_declaration -> [simple_type, IDENTIFIER], simple_type -> [int]]
Production number: [0, 3, 2, 4, 9, 24, 2, 5, 12, 22, 3, 2, 4, 7, 20, 45, 26, 2, 4, 7, 20, 45, 26, 1, 4, 7, 20, 44, 39, 45, 26, 45, 26, 34, 45, 27, 31, 45, 26, 2, 4, 8, 23, 2, 4, 8, 23, 2, 4, 6, 13, 15, 17, 2, 4, 6, 13, 15, 17, 1, 4, 6, 13, 15, 17]
The output tree: 
ParsingTree.ParsingTreeRow: index = 0, info = program, leftChild = 1, rightChild = -1, parent = -1, level = 0
ParsingTree.ParsingTreeRow: index = 1, info = start, leftChild = -1, rightChild = 2, parent = 0, level = 1
ParsingTree.ParsingTreeRow: index = 2, info = compound_statement, leftChild = 3, rightChild = -1, parent = 0, level = 1
ParsingTree.ParsingTreeRow: index = 3, info = {, leftChild = -1, rightChild = 4, parent = 2, level = 2
ParsingTree.ParsingTreeRow: index = 4, info = statement_list, leftChild = 5, rightChild = 116, parent = 2, level = 2
ParsingTree.ParsingTreeRow: index = 116, info = }, leftChild = -1, rightChild = -1, parent = 2, level = 2
ParsingTree.ParsingTreeRow: index = 5, info = statement_list, leftChild = 6, rightChild = 13, parent = 4, level = 3
ParsingTree.ParsingTreeRow: index = 13, info = statement, leftChild = 14, rightChild = -1, parent = 4, level = 3
ParsingTree.ParsingTreeRow: index = 6, info = simple_statement, leftChild = 7, rightChild = 12, parent = 5, level = 4
ParsingTree.ParsingTreeRow: index = 12, info = ;, leftChild = -1, rightChild = -1, parent = 5, level = 4
ParsingTree.ParsingTreeRow: index = 14, info = statement_list, leftChild = 15, rightChild = 71, parent = 13, level = 4
ParsingTree.ParsingTreeRow: index = 71, info = statement, leftChild = 72, rightChild = -1, parent = 13, level = 4
ParsingTree.ParsingTreeRow: index = 7, info = write_statement, leftChild = 8, rightChild = -1, parent = 6, level = 5
ParsingTree.ParsingTreeRow: index = 15, info = structure_statement, leftChild = 16, rightChild = -1, parent = 14, level = 5
ParsingTree.ParsingTreeRow: index = 72, info = statement_list, leftChild = 73, rightChild = 80, parent = 71, level = 5
ParsingTree.ParsingTreeRow: index = 80, info = statement, leftChild = 81, rightChild = -1, parent = 71, level = 5
ParsingTree.ParsingTreeRow: index = 8, info = write, leftChild = -1, rightChild = 9, parent = 7, level = 6
ParsingTree.ParsingTreeRow: index = 9, info = (, leftChild = -1, rightChild = 10, parent = 7, level = 6
ParsingTree.ParsingTreeRow: index = 10, info = IDENTIFIER, leftChild = -1, rightChild = 11, parent = 7, level = 6
ParsingTree.ParsingTreeRow: index = 11, info = ), leftChild = -1, rightChild = -1, parent = 7, level = 6
ParsingTree.ParsingTreeRow: index = 16, info = while_statement, leftChild = 17, rightChild = -1, parent = 15, level = 6
ParsingTree.ParsingTreeRow: index = 73, info = simple_statement, leftChild = 74, rightChild = 79, parent = 72, level = 6
ParsingTree.ParsingTreeRow: index = 79, info = ;, leftChild = -1, rightChild = -1, parent = 72, level = 6
ParsingTree.ParsingTreeRow: index = 81, info = statement_list, leftChild = 82, rightChild = 89, parent = 80, level = 6
ParsingTree.ParsingTreeRow: index = 89, info = statement, leftChild = 90, rightChild = -1, parent = 80, level = 6
ParsingTree.ParsingTreeRow: index = 17, info = while, leftChild = -1, rightChild = 18, parent = 16, level = 7
ParsingTree.ParsingTreeRow: index = 18, info = (, leftChild = -1, rightChild = 19, parent = 16, level = 7
ParsingTree.ParsingTreeRow: index = 19, info = condition, leftChild = 20, rightChild = 61, parent = 16, level = 7
ParsingTree.ParsingTreeRow: index = 61, info = ), leftChild = -1, rightChild = 62, parent = 16, level = 7
ParsingTree.ParsingTreeRow: index = 62, info = compound_statement, leftChild = 63, rightChild = -1, parent = 16, level = 7
ParsingTree.ParsingTreeRow: index = 74, info = read_statement, leftChild = 75, rightChild = -1, parent = 73, level = 7
ParsingTree.ParsingTreeRow: index = 82, info = simple_statement, leftChild = 83, rightChild = 88, parent = 81, level = 7
ParsingTree.ParsingTreeRow: index = 88, info = ;, leftChild = -1, rightChild = -1, parent = 81, level = 7
ParsingTree.ParsingTreeRow: index = 90, info = statement_list, leftChild = 91, rightChild = 98, parent = 89, level = 7
ParsingTree.ParsingTreeRow: index = 98, info = statement, leftChild = 99, rightChild = -1, parent = 89, level = 7
ParsingTree.ParsingTreeRow: index = 20, info = {, leftChild = -1, rightChild = 21, parent = 19, level = 8
ParsingTree.ParsingTreeRow: index = 21, info = statement_list, leftChild = 22, rightChild = 60, parent = 19, level = 8
ParsingTree.ParsingTreeRow: index = 60, info = }, leftChild = -1, rightChild = -1, parent = 19, level = 8
ParsingTree.ParsingTreeRow: index = 63, info = ar_expression, leftChild = 64, rightChild = 66, parent = 62, level = 8
ParsingTree.ParsingTreeRow: index = 66, info = relation, leftChild = 67, rightChild = 68, parent = 62, level = 8
ParsingTree.ParsingTreeRow: index = 68, info = ar_expression, leftChild = 69, rightChild = -1, parent = 62, level = 8
ParsingTree.ParsingTreeRow: index = 75, info = read, leftChild = -1, rightChild = 76, parent = 74, level = 8
ParsingTree.ParsingTreeRow: index = 76, info = (, leftChild = -1, rightChild = 77, parent = 74, level = 8
ParsingTree.ParsingTreeRow: index = 77, info = IDENTIFIER, leftChild = -1, rightChild = 78, parent = 74, level = 8
ParsingTree.ParsingTreeRow: index = 78, info = ), leftChild = -1, rightChild = -1, parent = 74, level = 8
ParsingTree.ParsingTreeRow: index = 83, info = read_statement, leftChild = 84, rightChild = -1, parent = 82, level = 8
ParsingTree.ParsingTreeRow: index = 91, info = simple_statement, leftChild = 92, rightChild = 97, parent = 90, level = 8
ParsingTree.ParsingTreeRow: index = 97, info = ;, leftChild = -1, rightChild = -1, parent = 90, level = 8
ParsingTree.ParsingTreeRow: index = 99, info = statement_list, leftChild = 100, rightChild = 107, parent = 98, level = 8
ParsingTree.ParsingTreeRow: index = 107, info = statement, leftChild = 108, rightChild = -1, parent = 98, level = 8
ParsingTree.ParsingTreeRow: index = 22, info = statement_list, leftChild = 23, rightChild = 31, parent = 21, level = 9
ParsingTree.ParsingTreeRow: index = 31, info = statement, leftChild = 32, rightChild = -1, parent = 21, level = 9
ParsingTree.ParsingTreeRow: index = 64, info = term, leftChild = 65, rightChild = -1, parent = 63, level = 9
ParsingTree.ParsingTreeRow: index = 67, info = !=, leftChild = -1, rightChild = -1, parent = 66, level = 9
ParsingTree.ParsingTreeRow: index = 69, info = term, leftChild = 70, rightChild = -1, parent = 68, level = 9
ParsingTree.ParsingTreeRow: index = 84, info = read, leftChild = -1, rightChild = 85, parent = 83, level = 9
ParsingTree.ParsingTreeRow: index = 85, info = (, leftChild = -1, rightChild = 86, parent = 83, level = 9
ParsingTree.ParsingTreeRow: index = 86, info = IDENTIFIER, leftChild = -1, rightChild = 87, parent = 83, level = 9
ParsingTree.ParsingTreeRow: index = 87, info = ), leftChild = -1, rightChild = -1, parent = 83, level = 9
ParsingTree.ParsingTreeRow: index = 92, info = declaration, leftChild = 93, rightChild = -1, parent = 91, level = 9
ParsingTree.ParsingTreeRow: index = 100, info = simple_statement, leftChild = 101, rightChild = 106, parent = 99, level = 9
ParsingTree.ParsingTreeRow: index = 106, info = ;, leftChild = -1, rightChild = -1, parent = 99, level = 9
ParsingTree.ParsingTreeRow: index = 108, info = statement, leftChild = 109, rightChild = -1, parent = 107, level = 9
ParsingTree.ParsingTreeRow: index = 23, info = simple_statement, leftChild = 24, rightChild = 30, parent = 22, level = 10
ParsingTree.ParsingTreeRow: index = 30, info = ;, leftChild = -1, rightChild = -1, parent = 22, level = 10
ParsingTree.ParsingTreeRow: index = 32, info = statement_list, leftChild = 33, rightChild = 41, parent = 31, level = 10
ParsingTree.ParsingTreeRow: index = 41, info = statement, leftChild = 42, rightChild = -1, parent = 31, level = 10
ParsingTree.ParsingTreeRow: index = 65, info = CONST, leftChild = -1, rightChild = -1, parent = 64, level = 10
ParsingTree.ParsingTreeRow: index = 70, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 69, level = 10
ParsingTree.ParsingTreeRow: index = 93, info = primitive_declaration, leftChild = 94, rightChild = -1, parent = 92, level = 10
ParsingTree.ParsingTreeRow: index = 101, info = declaration, leftChild = 102, rightChild = -1, parent = 100, level = 10
ParsingTree.ParsingTreeRow: index = 109, info = simple_statement, leftChild = 110, rightChild = 115, parent = 108, level = 10
ParsingTree.ParsingTreeRow: index = 115, info = ;, leftChild = -1, rightChild = -1, parent = 108, level = 10
ParsingTree.ParsingTreeRow: index = 24, info = assignment_statement, leftChild = 25, rightChild = -1, parent = 23, level = 11
ParsingTree.ParsingTreeRow: index = 33, info = simple_statement, leftChild = 34, rightChild = 40, parent = 32, level = 11
ParsingTree.ParsingTreeRow: index = 40, info = ;, leftChild = -1, rightChild = -1, parent = 32, level = 11
ParsingTree.ParsingTreeRow: index = 42, info = statement, leftChild = 43, rightChild = -1, parent = 41, level = 11
ParsingTree.ParsingTreeRow: index = 94, info = simple_type, leftChild = 95, rightChild = 96, parent = 93, level = 11
ParsingTree.ParsingTreeRow: index = 96, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 93, level = 11
ParsingTree.ParsingTreeRow: index = 102, info = primitive_declaration, leftChild = 103, rightChild = -1, parent = 101, level = 11
ParsingTree.ParsingTreeRow: index = 110, info = declaration, leftChild = 111, rightChild = -1, parent = 109, level = 11
ParsingTree.ParsingTreeRow: index = 25, info = IDENTIFIER, leftChild = -1, rightChild = 26, parent = 24, level = 12
ParsingTree.ParsingTreeRow: index = 26, info = =, leftChild = -1, rightChild = 27, parent = 24, level = 12
ParsingTree.ParsingTreeRow: index = 27, info = ar_expression, leftChild = 28, rightChild = -1, parent = 24, level = 12
ParsingTree.ParsingTreeRow: index = 34, info = assignment_statement, leftChild = 35, rightChild = -1, parent = 33, level = 12
ParsingTree.ParsingTreeRow: index = 43, info = simple_statement, leftChild = 44, rightChild = 59, parent = 42, level = 12
ParsingTree.ParsingTreeRow: index = 59, info = ;, leftChild = -1, rightChild = -1, parent = 42, level = 12
ParsingTree.ParsingTreeRow: index = 95, info = int, leftChild = -1, rightChild = -1, parent = 94, level = 12
ParsingTree.ParsingTreeRow: index = 103, info = simple_type, leftChild = 104, rightChild = 105, parent = 102, level = 12
ParsingTree.ParsingTreeRow: index = 105, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 102, level = 12
ParsingTree.ParsingTreeRow: index = 111, info = primitive_declaration, leftChild = 112, rightChild = -1, parent = 110, level = 12
ParsingTree.ParsingTreeRow: index = 28, info = term, leftChild = 29, rightChild = -1, parent = 27, level = 13
ParsingTree.ParsingTreeRow: index = 35, info = IDENTIFIER, leftChild = -1, rightChild = 36, parent = 34, level = 13
ParsingTree.ParsingTreeRow: index = 36, info = =, leftChild = -1, rightChild = 37, parent = 34, level = 13
ParsingTree.ParsingTreeRow: index = 37, info = ar_expression, leftChild = 38, rightChild = -1, parent = 34, level = 13
ParsingTree.ParsingTreeRow: index = 44, info = assignment_statement, leftChild = 45, rightChild = -1, parent = 43, level = 13
ParsingTree.ParsingTreeRow: index = 104, info = int, leftChild = -1, rightChild = -1, parent = 103, level = 13
ParsingTree.ParsingTreeRow: index = 112, info = simple_type, leftChild = 113, rightChild = 114, parent = 111, level = 13
ParsingTree.ParsingTreeRow: index = 114, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 111, level = 13
ParsingTree.ParsingTreeRow: index = 29, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 28, level = 14
ParsingTree.ParsingTreeRow: index = 38, info = term, leftChild = 39, rightChild = -1, parent = 37, level = 14
ParsingTree.ParsingTreeRow: index = 45, info = IDENTIFIER, leftChild = -1, rightChild = 46, parent = 44, level = 14
ParsingTree.ParsingTreeRow: index = 46, info = =, leftChild = -1, rightChild = 47, parent = 44, level = 14
ParsingTree.ParsingTreeRow: index = 47, info = ar_expression, leftChild = 48, rightChild = -1, parent = 44, level = 14
ParsingTree.ParsingTreeRow: index = 113, info = int, leftChild = -1, rightChild = -1, parent = 112, level = 14
ParsingTree.ParsingTreeRow: index = 39, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 38, level = 15
ParsingTree.ParsingTreeRow: index = 48, info = mod_expression, leftChild = 49, rightChild = -1, parent = 47, level = 15
ParsingTree.ParsingTreeRow: index = 49, info = mod, leftChild = -1, rightChild = 50, parent = 48, level = 16
ParsingTree.ParsingTreeRow: index = 50, info = (, leftChild = -1, rightChild = 51, parent = 48, level = 16
ParsingTree.ParsingTreeRow: index = 51, info = ar_expression, leftChild = 52, rightChild = 54, parent = 48, level = 16
ParsingTree.ParsingTreeRow: index = 54, info = ,, leftChild = -1, rightChild = 55, parent = 48, level = 16
ParsingTree.ParsingTreeRow: index = 55, info = ar_expression, leftChild = 56, rightChild = 58, parent = 48, level = 16
ParsingTree.ParsingTreeRow: index = 58, info = ), leftChild = -1, rightChild = -1, parent = 48, level = 16
ParsingTree.ParsingTreeRow: index = 52, info = term, leftChild = 53, rightChild = -1, parent = 51, level = 17
ParsingTree.ParsingTreeRow: index = 56, info = term, leftChild = 57, rightChild = -1, parent = 55, level = 17
ParsingTree.ParsingTreeRow: index = 53, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 52, level = 18
ParsingTree.ParsingTreeRow: index = 57, info = IDENTIFIER, leftChild = -1, rightChild = -1, parent = 56, level = 18
